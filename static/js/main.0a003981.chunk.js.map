{"version":3,"sources":["book.svg","LoaderWithText.js","BookSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoaderWithText","props","Loader","active","inline","size","text","API_KEY","BookSearch","state","loading","books","undefined","search","ww","window","innerWidth","fetchBooks","e","a","preventDefault","setState","searchTerms","fetch","response","json","jsonResponse","changeInputHandler","target","value","handleWindowSizeChange","componentDidMount","addEventListener","this","booksInfo","items","Card","Group","centered","itemsPerRow","stackable","style","margin","paddingTop","map","item","info","volumeInfo","id","title","authors","description","imageLinks","infoLink","publishedDate","publisher","key","href","color","Image","wrapped","src","thumbnail","Content","Header","Meta","join","Description","extra","minHeight","display","flexWrap","justifyContent","alignSelf","Menu","borderless","fixed","Container","Item","logo","header","position","Form","onSubmit","Input","placeholder","type","name","action","content","icon","onChange","alignItems","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a003981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.8133bbd8.svg\";","import React from 'react'\nimport { Loader } from 'semantic-ui-react'\n\nconst LoaderWithText = props => (\n  <Loader active inline=\"centered\" size=\"large\">{props.text}</Loader>\n)\n\nexport default LoaderWithText","import React, { Component } from 'react'\nimport { Menu, Container, Image, Form, Card } from 'semantic-ui-react';\nimport LoaderWithText from './LoaderWithText';\nimport logo from './book.svg';\n\nconst API_KEY = 'AIzaSyBTDfzdtanhLpztL7sl8eh4K6tLg8gpHz0';\n\nexport class BookSearch extends Component {\n  state = {\n    loading: false,\n    books: undefined,\n    search: '',\n    ww: window.innerWidth,\n  }\n\n  fetchBooks = async (e) => {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    })\n    const searchTerms = this.state.search;\n    const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchTerms}&key=${API_KEY}`);\n    const jsonResponse = await response.json();\n    this.setState({\n      loading: false,\n      books: jsonResponse\n    })\n  }\n\n  changeInputHandler = e => {\n    this.setState({\n      search: e.target.value\n    })\n  }\n\n  handleWindowSizeChange = () => {\n    this.setState({ ww: window.innerWidth });\n  };\n  \n  componentDidMount = () => {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n\n  render() {\n\n    const { books, search, loading, ww } = this.state;\n\n    const booksInfo = (books && books.items) ?\n    <Card.Group centered itemsPerRow={5} stackable={true}  style={{margin: '0 1rem', paddingTop: '6rem'}}>\n      {books.items.map(item => {\n        const info = item.volumeInfo;\n        const id = item.id;\n        const {\n          title = 'No title data.',\n          authors = ['No author data.'],\n          description = '',\n          imageLinks = '',\n          infoLink = '',\n          publishedDate,\n          publisher,\n        } = info;\n\n        return (\n          <Card key={id} href={infoLink} color=\"brown\">\n            <Image wrapped src={imageLinks.thumbnail} />\n            <Card.Content>\n              <Card.Header>{title}</Card.Header>\n              <Card.Meta>{authors.join(' / ')}</Card.Meta>\n              <Card.Description>{description}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              {publishedDate && publisher && <p>{`Published ${publishedDate && `on ${publishedDate}`} ${publisher && `on ${publisher}`}`}</p>}\n            </Card.Content>\n          </Card>\n        )\n      })}\n    </Card.Group> : \n    <div style={{ paddingTop: '6rem', minHeight: '90vh', display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>\n      <h2 style={{ alignSelf: 'center' }}>Şuan gösterilecek sonuç yok.</h2>\n    </div>;\n    \n\n    return (\n      <>\n        <Menu borderless fixed=\"top\">\n          <Container>\n            <Menu.Item>\n              <Image size=\"mini\" src={logo} />\n            </Menu.Item>\n            { ww >= 400 && <Menu.Item header>Google kitap arama uygulaması</Menu.Item> }\n            <Menu.Item position=\"right\">\n              <Form size={ ww >= 500 && 'mini'} onSubmit={this.fetchBooks}>\n                <Form.Group>\n                  <Form.Input\n                    placeholder=\"Kitap aramak için...\"\n                    type=\"search\"\n                    name=\"search\"\n                    action={\n                      \n                      {\n                      color: 'brown',\n                      content: ww >= 500 ? 'Ara' : null,\n                      icon: 'search'\n                    }}\n                    value={search}\n                    onChange={this.changeInputHandler} />\n                </Form.Group>\n              </Form>\n            </Menu.Item>\n          </Container>\n        </Menu>\n\n        { loading ?\n          <div style={{ paddingTop: '6rem', minHeight: '90vh', display: 'flex', alignItems: 'center' }}>\n            <LoaderWithText text=\"Yükleniyor...\" />\n          </div> :\n          booksInfo\n\n        }\n      </>\n    )\n  }\n}\n\nexport default BookSearch\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport BookSearch from './BookSearch';\n\nfunction App() {\n\n\n  return (\n      <BookSearch />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}